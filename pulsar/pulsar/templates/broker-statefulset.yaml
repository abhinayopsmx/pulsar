---
# Source: pulsar/templates/broker-statefulset.yaml
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "pulsar-broker"
  namespace: default
  labels:
    app: pulsar
    chart: pulsar-2.9.3
    release: pulsar
    heritage: Helm
    cluster: pulsar
    component: broker
spec:
  serviceName: "pulsar-broker"
  replicas: 1
  selector:
    matchLabels:
      app: pulsar
      release: pulsar
      component: broker
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: pulsar
        release: pulsar
        cluster: pulsar
        component: broker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: "pulsar-broker-acct"
      affinity:
        podAntiAffinity:
          
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                      - "pulsar"
                    - key: "release"
                      operator: In
                      values:
                      - pulsar
                    - key: "component"
                      operator: In
                      values:
                      - broker
                topologyKey: "kubernetes.io/hostname"
        
      terminationGracePeriodSeconds: 30
      initContainers:
      # This init container will wait for zookeeper to be ready before
      # deploying the bookies
      - name: wait-zookeeper-ready
        image: "hp3v-docker-np.oneartifactoryprod.verizon.com/apachepulsar-all:v2.9.3"
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
          - >-
            
            until bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server pulsar-zookeeper:2181 get /admin/clusters/pulsar; do
              echo "pulsar cluster pulsar isn't initialized yet ... check in 3 seconds ..." && sleep 3;
            done;
        volumeMounts:
        
      # This init container will wait for bookkeeper to be ready before
      # deploying the broker
      - name: wait-bookkeeper-ready
        image: "hp3v-docker-np.oneartifactoryprod.verizon.com/apachepulsar-all:v2.9.3"
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
          - >
            
            bin/apply-config-from-env.py conf/bookkeeper.conf;
            until bin/bookkeeper shell whatisinstanceid; do
              echo "bookkeeper cluster is not initialized yet. backoff for 3 seconds ...";
              sleep 3;
            done;
            echo "bookkeeper cluster is already initialized";
            bookieServiceNumber="$(nslookup -timeout=10 pulsar-bookie | grep Name | wc -l)";
            until [ ${bookieServiceNumber} -ge 2 ]; do
              echo "bookkeeper cluster pulsar isn't ready yet ... check in 10 seconds ...";
              sleep 10;
              bookieServiceNumber="$(nslookup -timeout=10 pulsar-bookie | grep Name | wc -l)";
            done;
            echo "bookkeeper cluster is ready";
        envFrom:
          - configMapRef:
              name: "pulsar-bookie"
        volumeMounts:
          
      containers:
      - name: "pulsar-broker"
        image: "hp3v-docker-np.oneartifactoryprod.verizon.com/apachepulsar-all:v2.9.3"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /status.html
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /status.html
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        resources:
          limits:
            cpu: 0.5
            memory: 1024Mi
          requests:
            cpu: 0.2
            memory: 512Mi
        command: ["sh", "-c"]
        args:
        - >
          bin/apply-config-from-env.py conf/broker.conf;
          bin/gen-yml-from-env.py conf/functions_worker.yml;
          echo "OK" > status;
          
          bin/pulsar zookeeper-shell -server pulsar-zookeeper:2181 get /loadbalance/brokers/${HOSTNAME}.pulsar-broker.default.svc.cluster.local:8080;
          while [ $? -eq 0 ]; do
            echo "broker ${HOSTNAME}.pulsar-broker.default.svc.cluster.local znode still exists ... check in 10 seconds ...";
            sleep 10;
            bin/pulsar zookeeper-shell -server pulsar-zookeeper:2181 get /loadbalance/brokers/${HOSTNAME}.pulsar-broker.default.svc.cluster.local:8080;
          done;
          cat conf/pulsar_env.sh;
          OPTS="${OPTS} -Dlog4j2.formatMsgNoLookups=true" exec bin/pulsar broker;
        ports:
        # prometheus needs to access /metrics endpoint
        - name: http
          containerPort: 8080
        - name: "pulsar"
          containerPort: 6650
        envFrom:
        - configMapRef:
            name: "pulsar-broker"
        volumeMounts:
          
      volumes:
